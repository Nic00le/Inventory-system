{"ast":null,"code":"import { ref } from \"vue\";\n// import jwt_decode from \"jwt-decode\";\n\nexport default {\n  name: 'LoginView',\n  setup() {\n    const credential = ref({});\n    const login = async function () {\n      var response = await fetch(\"/hashlogin\", {\n        method: \"post\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(credential.value)\n      });\n      console.log(response);\n      if (response.ok) {\n        var data = await response.json();\n        localStorage.setItem(\"token\", data.token);\n        localStorage.setItem(\"type\", data.type);\n        localStorage.setItem(\"userId\", data.userId);\n\n        // var decoded = jwt_decode(data.token);\n        // alert(JSON.stringify(decoded))\n\n        // alert(JSON.stringify(data))\n        alert(data.type + \", login Successfully.\");\n        location.assign(\"/\");\n      } else {\n        alert(response.statusText);\n      }\n    };\n    return {\n      credential,\n      login\n    };\n  }\n};","map":{"version":3,"mappings":"AAkBA,SAASA,GAAE,QAAS,KAAK;AACzB;;AAGA,eAAe;EACXC,IAAI,EAAE,WAAW;EACjBC,KAAK,GAAG;IACJ,MAAMC,UAAS,GAAIH,GAAG,CAAC,CAAC,CAAC,CAAC;IAE1B,MAAMI,KAAI,GAAI,kBAAkB;MAE5B,IAAIC,QAAO,GAAI,MAAMC,KAAK,CAAC,YAAY,EAAE;QACrCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,UAAU,CAACS,KAAK;MACzC,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAACT,QAAQ;MAEpB,IAAIA,QAAQ,CAACU,EAAE,EAAE;QACb,IAAIC,IAAG,GAAI,MAAMX,QAAQ,CAACY,IAAI,EAAC;QAC/BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;QACzCF,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACK,IAAI,CAAC;QACvCH,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEH,IAAI,CAACM,MAAM,CAAC;;QAE3C;QACA;;QAEA;QACAC,KAAK,CAACP,IAAI,CAACK,IAAG,GAAI,uBAAuB;QACzCG,QAAQ,CAACC,MAAM,CAAC,GAAG;MACvB,OAAO;QACHF,KAAK,CAAClB,QAAQ,CAACqB,UAAU;MAC7B;IACJ;IAEA,OAAO;MACHvB,UAAU;MAAEC;IAChB;EACJ;AACJ","names":["ref","name","setup","credential","login","response","fetch","method","headers","body","JSON","stringify","value","console","log","ok","data","json","localStorage","setItem","token","type","userId","alert","location","assign","statusText"],"sourceRoot":"","sources":["/Users/yeelam/Documents/Year3 sem1/COMP3047/Lab/Asm03/Front/src/views/LoginView.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n        <form @submit.prevent=\"login()\">\n            <div class=\"mb-3\">\n                <label for=\"exampleInputEmail1\" class=\"form-label\">Email address</label>\n                <input type=\"text\" class=\"form-text\" v-model=\"credential.email\" aria-describedby=\"emailHelp\">\n                <div id=\"emailHelp\" class=\"form-text\">We'll never share your email with anyone else.</div>\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"exampleInputPassword1\" class=\"form-label\">Password</label>\n                <input type=\"password\" class=\"form-control\" v-model=\"credential.password\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n        </form>\n    </div>\n</template>\n\n<script>\nimport { ref } from \"vue\";\n// import jwt_decode from \"jwt-decode\";\n\n\nexport default {\n    name: 'LoginView',\n    setup() {\n        const credential = ref({});\n\n        const login = async function () {\n\n            var response = await fetch(\"/hashlogin\", {\n                method: \"post\",\n                headers: {\n                    \"content-type\": \"application/json\"\n                },\n                body: JSON.stringify(credential.value)\n            });\n\n            console.log(response)\n\n            if (response.ok) {\n                var data = await response.json()\n                localStorage.setItem(\"token\", data.token);\n                localStorage.setItem(\"type\", data.type);\n                localStorage.setItem(\"userId\", data.userId);\n\n                // var decoded = jwt_decode(data.token);\n                // alert(JSON.stringify(decoded))\n\n                // alert(JSON.stringify(data))\n                alert(data.type + \", login Successfully.\")\n                location.assign(\"/\")\n            } else {\n                alert(response.statusText)\n            }\n        }\n\n        return {\n            credential, login\n        }\n    }\n}\n</script>\n  "]},"metadata":{},"sourceType":"module"}